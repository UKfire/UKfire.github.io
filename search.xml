<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>我理解的PPP-SINGLETON模式和MONOSTATE模式</title>
      <link href="/2018/06/02/%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84PPP-SINGLETON%E6%A8%A1%E5%BC%8F%E5%92%8CMONOSTATE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/06/02/%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84PPP-SINGLETON%E6%A8%A1%E5%BC%8F%E5%92%8CMONOSTATE%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>其实单例模式只是表达我们的一种意图，一种不想你初始化多个对象的意图，而这个意图完全可以在编码中硬实现，在初始化应用程序时，只创建每个对象的一个实例，然后就使用该实例。</p><h6 id="SINGLETON模式"><a href="#SINGLETON模式" class="headerlink" title="SINGLETON模式"></a>SINGLETON模式</h6><p>Singleton没有公有构造函数，不使用getInstance()方法，就无法获得它的实例。</p><p>Singleton分为懒汉模式和饿汉模式，其中饿汉模式是类一旦加载，就把单例初始化完成，保证了getInstance()的时候，单例已经是存在的，不管以后会不会使用这个单例，都会占据一定的内存，但是相应的在第一次使用的速度也会更快；懒汉模式只有当调用getInstance()的时候，才会去初始化这个单例。故饿汉模式天生就是线程安全的，而懒汉模式需要自己保证线程安全。</p><p>饿汉模式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>懒汉模式：(懒汉模式大致有三种写法)<br>1、synchronized同步锁getInstance()方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、double check双重检查锁定<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3、静态内部类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceHolder</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> InstanceHolder.instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="MONOSTATE模式"><a href="#MONOSTATE模式" class="headerlink" title="MONOSTATE模式"></a>MONOSTATE模式</h6><p>MonoState翻译为单态，是另一种获取对象单一性的方法，它使用了和Singleton模式完全不同的工作机制，两个MonoState对象共享相同的变量，这一点很容易办到，只要把所有变量都变成静态变量即可，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">MonoState</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> itsX = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">itsX = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> itsX;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样通过一个static的变量itsX，无论构造多少个对象，都会表现的像一个对象一样。</p><h6 id="Singleton和MONOSTATE的区别"><a href="#Singleton和MONOSTATE的区别" class="headerlink" title="Singleton和MONOSTATE的区别"></a>Singleton和MONOSTATE的区别</h6><p>这两个模式的区别在于，Singleton模式更关注结构上的单一性，它会防治创建出多个对象实例；而MonoState模式则强制行为上的单一性，没有结构方面的限制。基于这点可以考虑如下：MonoState的场景一般都适用于Singleton，而Singleton的场景未必适用于MonoState。</p>]]></content>
      
      <categories>
          
          <category> PPP </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>nio中的多路复用IO模型</title>
      <link href="/2018/05/29/nio%E4%B8%AD%E7%9A%84%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8IO%E6%A8%A1%E5%9E%8B/"/>
      <url>/2018/05/29/nio%E4%B8%AD%E7%9A%84%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8IO%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>前段时间写过一篇<a href="https://ytying.com/2018/04/28/%E4%B8%BA%E4%BB%80%E4%B9%88OpenResty%E6%80%A7%E8%83%BD%E5%A5%BD/" target="_blank" rel="noopener">《为什么OpenResty性能好》</a>阐述了在linux下使用epoll模型来提升nginx的io处理能力，今天看了一篇讲java中io演进的过程的文章，发现nio中的Selector同样使用了epoll去处理大量连接（其实是select-windows，kqueue-freebsd，epoll-linux）。</p><p>在通过<code>Selector.open()</code>创建Selector的时候，会执行以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SocketChannel <span class="title">open</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SelectorProvider.provider().openSocketChannel();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看provider()方法，重点是<code>provider = sun.nio.ch.DefaultSelectorProvider.create()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SelectorProvider <span class="title">provider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (provider != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> provider;</span><br><span class="line">        <span class="keyword">return</span> AccessController.doPrivileged(</span><br><span class="line">            <span class="keyword">new</span> PrivilegedAction&lt;SelectorProvider&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> SelectorProvider <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (loadProviderFromProperty())</span><br><span class="line">                            <span class="keyword">return</span> provider;</span><br><span class="line">                        <span class="keyword">if</span> (loadProviderAsService())</span><br><span class="line">                            <span class="keyword">return</span> provider;</span><br><span class="line">                        provider = sun.nio.ch.DefaultSelectorProvider.create();</span><br><span class="line">                        <span class="keyword">return</span> provider;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我是mac，所以使用的是macOS版本的jdk，其DefaultSelectorProvider使用的是KQueueSelectorProvidor，如果是linux版本的jdk，默认SelectorProvidor使用的就是EpollSelectorProvidor，不过说白了都是多路复用io模型，用云风一篇博客<a href="https://blog.codingnow.com/2006/04/iocp_kqueue_epoll.html" target="_blank" rel="noopener">《IOCP , kqueue , epoll … 有多重要？》</a>里面说的：</p><blockquote><p>select模型叫鬼子进村策略，一遍遍的询问“鬼子进村了吗？”，“鬼子进村了吗？”… 大量的 cpu 时间都耗了进去。使用 kqueue 这些，变成了派一些个人去站岗，鬼子来了就可以拿到通知，效率自然高了许多。</p></blockquote><p>特别有意思，这里KQueueSelectorProvider的openSelector()方法返回了KQueueSelectorImpl实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AbstractSelector <span class="title">openSelector</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> KQueueSelectorImpl(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当在代码中使用<code>selector.select()</code>或它的几个重载方法，通过Selector选择通道时，这些方法返回你所感兴趣的事件（如连接、接受、读或写）已经准备就绪的那些通道。这里就会调用到KQueueSelectorImpl（或者其他的XXSelectorImpl）重写父类的doSelect(long var1)方法了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">doSelect</span><span class="params">(<span class="keyword">long</span> var1)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> var3 = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.closed) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClosedSelectorException();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.processDeregisterQueue();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> var7;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.begin();</span><br><span class="line">            var7 = <span class="keyword">this</span>.kqueueWrapper.poll(var1);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.end();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.processDeregisterQueue();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.updateSelectedKeys(var7);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中重点就是<code>KqueueWrapper.poll(var1)</code>啦，这个KQeueueArrayWrapper就是jdk实现Kqueue模型的代码了，Kqueue模型我没研究过就不bb了，有时间可以去看一下linux下jdk的EPollArrayWrapper的实现～</p><p>最后，云大的这篇<a href="https://blog.codingnow.com/2006/04/iocp_kqueue_epoll.html" target="_blank" rel="noopener">《IOCP , kqueue , epoll … 有多重要？》</a>写在2006年，想法是通过在游戏服务器和客户端之间加一层连接服务器，连接服务器做的事情可以非常简单，只是把多个连接上的数据汇集到一起。假设同时连接总数不超过 65536 个，我们只需要把每个连接上的数据包加上一个两字节的数据头就可以表识出来。这个连接服务器再通过单个连接和逻辑服务器通讯就够了。这样做，游戏服务器对网络层的代码量的需求也大大减少了，可以更专心的构建逻辑。也能更方便的移植到不同系统上而不用考虑各系统间不同且负责的网络代码了。云大的思想真的是超前啊，每次看到他在我小学几年级写的博客，都有种眼界大开的感觉～</p>]]></content>
      
      <categories>
          
          <category> 深入学习java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>我理解的PPP-STRATEGY模式</title>
      <link href="/2018/05/26/%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84PPP-STRATEGY%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/05/26/%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84PPP-STRATEGY%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h6 id="Strategy模式介绍"><a href="#Strategy模式介绍" class="headerlink" title="Strategy模式介绍"></a>Strategy模式介绍</h6><p>Strategy策略模式和Template模版模式很像，但最大的区别是Template模式的派生类不可避免地和模版类绑定在一起，使得子类中的方法无法重用，而Strategy模式使用委托的手段不直接建立模版类和实现类之间的关系，而是通过对接口的委托来实现模版类和派生类的分离，可以参考如下类图：<br><img src="https://ytying.com/img/strategy.png" alt="strategy模式类图"><br>可以看到BubbleSorter通过组合的方式引入一个SortHandle接口，而SortHandle接口中正包含BubbleSorter所需要的那几个模版方法，所以IntBubbleSorter只需实现SortHandle接口后，就能够组合出BubbleSorter来，不仅如此，IntBubbleSorter甚至还可以提供给其它模版类使用，比如一个改进版的QuickBubbleSorter，它在一次对于数组的遍历中发现数组元素已经是有序的，就提前结束。</p><h6 id="jdk中的Strategy模式"><a href="#jdk中的Strategy模式" class="headerlink" title="jdk中的Strategy模式"></a>jdk中的Strategy模式</h6><p>典型的策略模式在jdk中的实现就是Collection.sort()方法，它使用Comparator对象作为参数，根据Comparator接口的不同实现，对象会以不同方式进行排序。</p>]]></content>
      
      <categories>
          
          <category> PPP </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>我理解的PPP-TEMPLATE模式</title>
      <link href="/2018/05/24/%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84PPP-TEMPLATE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/05/24/%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84PPP-TEMPLATE%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h6 id="Template模式介绍"><a href="#Template模式介绍" class="headerlink" title="Template模式介绍"></a>Template模式介绍</h6><p>Template是模版模式，其核心是定义了一个（final可选）的模版方法，这个方法中需要调用到的一系列函数作为抽象函数供子类实现，子类继承了这个模版类之后，只需要重写这些抽象函数而不必关心模版方法的具体实现，就能完成某个算法或功能。</p><p>举一个具体的例子，我们要实现一个冒泡排序算法，可以先实现它的模版：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSorter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> nextToLast = length - <span class="number">2</span>; nextToLast &gt;= <span class="number">0</span>; nextToLast-- ) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt;= nextToLast; index++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (outOfOrder(index)) &#123;</span><br><span class="line">                    swap(index);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">outOfOrder</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有了BubbleSorter模版类，就可以通过继承它去实现各种不同类型的对象的排序算法了，只需要实现其它的比较函数outOfOrder(index)和交换函数swap(index)，如下的IntBubbleSorter：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntBubbleSorter</span> <span class="keyword">extends</span> <span class="title">BubbleSorter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] array = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] theArray)</span> </span>&#123;</span><br><span class="line">        array = theArray;</span><br><span class="line">        length = array.length;</span><br><span class="line">        doSort();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = array[index];</span><br><span class="line">        array[index] = array[index+<span class="number">1</span>];</span><br><span class="line">        array[index+<span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">outOfOrder</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array[index] &gt; array[index+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种把通用算法放在模版类中，并通过继承来在不同的场景中实现该通用算法，但是代价也很高，继承是一种非常强的关系，派生类不可避免地要和他们的基类绑定在一起，代码看起来也费劲。</p><h6 id="jdk中的Template模式"><a href="#jdk中的Template模式" class="headerlink" title="jdk中的Template模式"></a>jdk中的Template模式</h6><p>AbstractList中的indexOf(Object o)就是一个模版方法，调用了listIterator()方法获得迭代器，而这个listIterator()方法就是延迟到子类中去实现的，如ArrayList、Vector等。</p>]]></content>
      
      <categories>
          
          <category> PPP </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>关于数据报表时效性问题的思考</title>
      <link href="/2018/05/22/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E6%8A%A5%E8%A1%A8%E6%97%B6%E6%95%88%E6%80%A7%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2018/05/22/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E6%8A%A5%E8%A1%A8%E6%97%B6%E6%95%88%E6%80%A7%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<p>考虑一个数据报表需求，需要在业务端给客户呈现一个数据报表，里面有诸如点击、咨询等不同维度的平铺数据或者漏斗数据，系统无外乎要有以下几个模块：</p><p>1、数据收集模块</p><p>2、消息队列削峰</p><p>3、数据处理模块</p><p>4、数据报表库（可能是OLAP，也可能是OLTP）</p><p>5、数据报告模块</p><p>数据收集模块，就是收集用户的行为日志，将其落入磁盘，这里尽量保证高性能，不会丢失用户的数据记录。</p><p>消息队列，起到了削平峰值的作用，可能数据处理的速度比不上数据收集的速度，那么就会丢失数据，如果有消息队列在中间将峰值削平，就可以保证数据不丢，使数据处理模块按平缓的速度进行处理。</p><p>数据处理模块要从消息队列中取数据清洗入库，这里尽可能让清洗逻辑简单快速，数据库入库尽量能batch insert，保证合适的吞吐量。</p><p>数据报告模块，就是从各分时库中join数据进行展示的模块。</p><p>这么看没什么问题，但是往往现实是残酷的，比如这个系统可能是分成多个子系统的，子系统的数据库又是独立的，甚至子系统的负责团队都是不同的，那么其中一个子系统提供的接口不可能面面俱到包含数据报告希望涵盖的字段（一个是很难做到，另一个是处理数据报告外其他地方根本用不到这个字段）。</p><p>但是数据报告又是以用户为维度的，所以客户的id是一个必填非空列，但是客户数据是存在子系统A中，在对接前端的另一个子系统B里只有用户id（注意用户id和客户id不是一个id），这个时候矛盾就来了，B子系统根本不关心客户id是多少，因为这跟前端展示没有任何关系，吵架由此发生。</p><p>B：我这边根本没存这个客户id，如果每次都要通过接口去获取你这个客户id，那么就会多一词接口调用的网络成本，而且在列表接口，如果每一个item都去请求一次该item层层推倒上去的客户id，就不是一个接口的性能问题了。</p><p>A：报表不仅仅是我们的需求，不是说我们想做报表，而是产品是每个团队共同的，我们要为整个产品去考虑，id我们可以给你提供接口获取，但是这个是必传字段。</p><p>B：这无非就是一个性能的问题嘛，就是看我们这边性能损失和你们那边性能损失谁更大嘛，我们是展示给用户的产品，一点微小的延迟可能造成极不好的体验，你们那边可以在出报表的时候直接join通过关联关系取到客户id，报表慢一点我觉得可以接受。</p><p>A：这不是一个慢的问题，而是数据记录的是当时的状态，我事后去查反应的是现在的状态，这个无法进行对接，如果中间某条数据的变更我是无法得知的。</p><p>B：……</p><p>A：……</p><p>为了保证数据的时效性，是不能在后续的清洗操作或者出报表操作的时候再去join，因为此时的数据已经不是当时的分片，就算中间时间再短，也无法保证当时的数据完整性了。</p><p>解决方案有这么几种：</p><p>1、逐一获取每条追溯的id，效率低</p><p>2、将列表页的数据延迟到详情页再发送，这样就可以在详情中做一些操作</p><p>3、将B系统的数据库做冗余，冗余需要的列</p><p>4、将A，B数据库都通过数据流导入一个高可用数据数据库集群，所有列表的读操作都通过这个数据库来join，直接获得信息，无需接口传递网络开销</p><p>杂七杂八写了一堆，无非就是工作上的一些心得体会，给踩了的坑做个记录，还有今天看到极客时间出了一个关于游戏开发的专栏，非常感兴趣，毕竟我最崇拜的云风就是搞游戏的，哈哈。</p>]]></content>
      
      <categories>
          
          <category> 瞎搞 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>我理解的PPP-ACTIVE_OBJECT模式</title>
      <link href="/2018/05/20/%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84PPP-ACTIVE%20OBJECT%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/05/20/%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84PPP-ACTIVE%20OBJECT%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>Active Object模式是Command模式的运用之一，是实现多线程的一种方式，jdk中concurrent包下的ThreadPoolExecutor就是Active　Object中Scheduler的一种实现。其实这个模式在PPP中的看得我都云里雾里的，有些困惑，在看了这篇文章之后，才有了一点理解：<a href="http://ifeve.com/java-active-object" target="_blank" rel="noopener">《JAVA多线程编程实战指南》之Active Object(主动对象)模式</a></p><blockquote><p>Active Object是一种异步编程模式，通过对方法的调用（method invocation）与方法的执行(method execution)进行解耦来提高并发性。类似于System.gc()这个方法：客户端代码调用了gc()后，一个垃圾回收任务会被提交，但此JVM不一定进行了垃圾回收，而可能是在gc()方法调用返回后的某段时间才开始执行垃圾回收任务。我们知道，System.gc()这个代码是写在自己线程中的，而JVM垃圾回收有专门的线程来执行，换而言之，System.gc()这个方法所代表动作的调用和执行是运行在不同线程中的，从而提高了并发性。</p></blockquote><p>其实这个模式说白了就是在一个线程中提交任务，但是运行该任务的并不是提交任务的线程，有点类似线程池，把任务提交到线程池，具体怎么执行就是线程池去调度的事情了。</p><p>第一个模式就这么跳的吗&gt;_&lt;，感情我之前翻的那几章都是运气好碰到容易理解的了。</p>]]></content>
      
      <categories>
          
          <category> PPP </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>我理解的PPP-开篇</title>
      <link href="/2018/05/18/%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84PPP-%E5%BC%80%E7%AF%87/"/>
      <url>/2018/05/18/%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84PPP-%E5%BC%80%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>PPP是英文是Principles，Patterns and Practices，是Rob大叔写的关于敏捷开发的实践，中文是《敏捷软件开发：原则、模式与实践》，这本书是一个经验丰富的同事推荐给我的，他说当年他的师傅对OOP，设计模式，敏捷开发这一套了如指掌，还和他一起做过结对编程，说到结对编程，一直感觉是个对软件质量非常有保证的开发方式，实时code review和讨论过的需求比自己理解的更加深刻也更能避免错误。</p><p>我尝试读了其中几个章节，抛开前几章的敏捷实践不说，光说设计模式，这本书能把设计模式深入浅出到抽丝剥茧的程度，我觉得比我之前看过的诸如一些《大话设计模式》之类的更深邃又易懂，不过也许读《大话设计模式》的时候是在上学的时候，那时候对软件工程的理解本身就不是很深刻的缘故。不过既然现在的我觉得PPP是一本难得的经典，那么就决定写一个系列来记录一下，就全当是给以后的的一个当年的回顾，看看当年的理解是否有偏差，是否有懵懂和无知。</p>]]></content>
      
      <categories>
          
          <category> PPP </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iPad看代码靠谱吗</title>
      <link href="/2018/05/15/iPad%E7%9C%8B%E4%BB%A3%E7%A0%81%E9%9D%A0%E8%B0%B1%E5%90%97/"/>
      <url>/2018/05/15/iPad%E7%9C%8B%E4%BB%A3%E7%A0%81%E9%9D%A0%E8%B0%B1%E5%90%97/</url>
      <content type="html"><![CDATA[<p>这几天突发奇想，平时抱着iPad就是看视频玩游戏，未免太颓废了，如果能用抱着iPad的时间读读源码，古人云书读百遍，其义自现，我理解代码也是一样，哪怕一时读不懂，或者整体架构太过庞杂不能融会贯通，也能读读注释，或者记下几个片段，日积月累，也是不小的收获。</p><p>于是上网查了一发iPad上看代码的软件，发现并不是我一个人这么想，就连OpenResty的作者<strong>agentzh</strong>当初在学 Nginx源码的时候，也是用 Kindle抄代码来回揣摩：</p><blockquote><p>如果你把抄书和抄代码仅视为一种“态度”，那可就大错特错了，我可不是那种笨人。我当年学习 Nginx 源码的时候，白天上班就对着 Kindle 抄 C 源，同时就已暗记于心，晚上回家在房子里来回踱步，在脑海中反复回放白天抄过的源码，直至融会贯通，深得其奥妙。这段日子持续了一二月后，便大彻大悟了。</p></blockquote><p>看到这段话就下定决心要把iPad利用起来，网上推荐了Code Viewer,但是我在导入jdk源码的时候总是莫名闪退，可能是我的平板太老了…</p><p>后面找到一个更好用的软件，<strong>Code Navigator</strong>，免费版的可以导入5个代码库，可以用局域网从电脑上传到iPad上，收费版的是50元，支持从github上导入等更多功能。</p><p>于是我花了半个小时，读了HashMap,ConcurrentHashMap,TreeMap,Finalizer等类的……注释</p><p>因为屏幕小，类之间不能灵活切换，看起来有点费劲的，我觉得更适合读一些你已经知道怎么用了，但是对内部实现不是很清楚的局部代码，对于全局的把控还是略显捉襟见肘。</p><p>后面准备整个rpc框架的代码看看，平时用的多了，基本原理也知道，仔细看看如何实现，如何设计应该大有裨益。</p>]]></content>
      
      <categories>
          
          <category> 瞎搞 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>python皮excel</title>
      <link href="/2018/05/14/python%E7%9A%AEexcel/"/>
      <url>/2018/05/14/python%E7%9A%AEexcel/</url>
      <content type="html"><![CDATA[<p>最近和运营接触得比较多，对运营玩转excel的技术不由的心生佩服，一拖一拽，就把各种类型的数据拎出来了，再点两下，就绘制成图表了，而且速度之快不亚于当时acm集训队那种噼里啪啦的敲键盘速度，真的是行行出状元啊，excel玩得6也能走向人生巅峰。</p><p>因为要给运营整合数据，所以用python疯狂操作了一发excel，什么合并单元格、飘红、加粗都不在话下，这里记录一下：</p><p>Python操作excel用到了两个包，<strong>xlrd</strong>和<strong>xlwt</strong>，xlrd是用于读取excel，xlwt是用于写入excel。</p><h4 id="读excel"><a href="#读excel" class="headerlink" title="读excel"></a>读excel</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 打开data.xls</span><br><span class="line">wb = xlrd.open_workbook(<span class="string">r'../data.xls'</span>)</span><br><span class="line">// 使用第一个工作薄</span><br><span class="line">sheet = wb.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">// 读取第一列的元素，返回一个list</span><br><span class="line">cols0 = sheet.col_values(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>读excel的就用到这么多，因为只需要读取原文件的某几列先预处理一下就行了。</p><h4 id="写excel"><a href="#写excel" class="headerlink" title="写excel"></a>写excel</h4><p>写excel有两个api，一个是单个单元格写入的write，另一个是写入并合并单元格的write_merge。</p><p>先介绍下write(r,c,data,style)，r是要写入的行号，c是要写入的列号，都从0开始，data是这个单元格要写入的数据，style是单元格样式，后面介绍；</p><p>写入合并单元格的参数比write要多两个，write_merge(r,r1,c,c1,data,style)，r是起始行号，r1是终点行号，c是起始列号，c1是终止列号，data、style和write一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 打开一个Workbook，编码utf<span class="number">-8</span></span><br><span class="line">wb = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">// 给这个文件新加一个工作薄</span><br><span class="line">sheet = wb.add_sheet(<span class="string">"工作薄1"</span>,cell_overwrite_ok=<span class="keyword">True</span>)</span><br><span class="line">// 给单元格设置style，后面介绍</span><br><span class="line">style = set_style(<span class="string">'SimSun'</span>,<span class="number">220</span>)</span><br><span class="line"></span><br><span class="line">row = [<span class="string">u'姓名'</span>,<span class="string">u'年龄'</span>,<span class="string">u'爱好'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(row)):</span><br><span class="line">// 给表格第一、二行（合并单元格）前三列分别写入姓名,年龄,籍贯</span><br><span class="line">sheet.write_merge(<span class="number">0</span>,<span class="number">1</span>,i,i,row[i],style)</span><br><span class="line"></span><br><span class="line">data = [<span class="string">u'雷犀'</span>,<span class="number">18</span>,<span class="string">u'跳水'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(data)):</span><br><span class="line">// 给表格第三行前三列分别写入雷犀,<span class="number">18</span>,跳水</span><br><span class="line">sheet.write(<span class="number">2</span>,i,data[i],style)</span><br><span class="line"></span><br><span class="line">// 保存数据</span><br><span class="line">wb.save(<span class="string">'../pi.xls'</span>)</span><br></pre></td></tr></table></figure><p>其中无论是write还是write_merge都需要一个style参数，这个代表了单元格的样式，看下面的set_style函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">def <span class="title">set_style</span><span class="params">(name,height,bgyellow=False,color=<span class="number">0</span>,bold=False)</span>:</span></span><br><span class="line"><span class="function">style </span>= xlwt.XFStyle()</span><br><span class="line"></span><br><span class="line">font = xlwt.Font()</span><br><span class="line"><span class="comment">// 设置字体</span></span><br><span class="line">font.name = name</span><br><span class="line"><span class="comment">// 是否加粗</span></span><br><span class="line">font.bold = bold</span><br><span class="line"><span class="comment">// 字体颜色，0代表黑色，2代表红色</span></span><br><span class="line">font.colour_index = color</span><br><span class="line"><span class="comment">// 设置字体高度</span></span><br><span class="line">font.height = height</span><br><span class="line">style.font = font</span><br><span class="line"></span><br><span class="line">alignment = xlwt.Alignment()</span><br><span class="line"><span class="comment">// 水平居中</span></span><br><span class="line">alignment.horz = xlwt.Alignment.HORZ_CENTER</span><br><span class="line"><span class="comment">// 垂直居中</span></span><br><span class="line">alignment.vert = xlwt.Alignment.VERT_CENTER</span><br><span class="line">style.alignment = alignment</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> bgyellow:</span><br><span class="line">ptn = xlwt.Pattern()</span><br><span class="line"><span class="comment">// 背景颜色是实体</span></span><br><span class="line">ptn.pattern = xlwt.Pattern.SOLID_PATTERN</span><br><span class="line"><span class="comment">// 背景颜色是黄色</span></span><br><span class="line">ptn.pattern_fore_colour = <span class="number">0x0D</span></span><br><span class="line"><span class="comment">// 这个pattern属性不设置，默认白色背景</span></span><br><span class="line">style.pattern = ptn</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> style</span><br></pre></td></tr></table></figure><p>在查找资料的过程中发现这样一行一行手撸excel虽说可以做到比较精细调整样式，但代码比较恶心，听说用pandas包中的DataFrame数据结构可以很轻松的一键转成csv，后面有机会要学一下，睡了，不皮了。</p>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>谈一谈Java中的几种引用</title>
      <link href="/2018/05/10/%E8%B0%88%E4%B8%80%E8%B0%88Java%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BC%95%E7%94%A8/"/>
      <url>/2018/05/10/%E8%B0%88%E4%B8%80%E8%B0%88Java%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BC%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<h4 id="JDK1-2以前"><a href="#JDK1-2以前" class="headerlink" title="JDK1.2以前"></a>JDK1.2以前</h4><p>JDK1.2之前，Java中引用的定义很传统：如果reference类型的数据中存储的数值代表的是另一块内存的起始地址，就称这块内存代表着一个引用。这种定义很纯粹，但是太过狭隘，一个对象在这种定义下就只能处于被引用和不被引用两种状态中，对于如何描述一些“当内存空间够就保留在内存中，如果内存空间紧张就抛弃”的对象就无能为力了。而很多系统的缓存功能都符合这样的应用场景。</p><hr><h4 id="JDK1-2以后"><a href="#JDK1-2以后" class="headerlink" title="JDK1.2以后"></a>JDK1.2以后</h4><p>在JDK1.2之后，Java对引用的概念进行了扩充，将引用分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）4种，这4种引用强度依次逐渐减弱。<br>跟引用有关的类都在包java.lang.ref中，如下图：<br><img src="https://ytying.com/img/package-ref.png" alt="java.lang.ref包类关系图"><br>可以看到四种引用都继承自Reference，其中ReferenceQueue是引用队列，在引用对象被垃圾回收器回收，Java虚拟机就会把这些引用加入到与之关联的引用队列中。</p><h4 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h4><p>强引用就是在程序代码中普遍存在的，类似“Object obj = new Object()”这类的引用，只要强引用存在，jvm宁愿抛出OOM这样的异常，也不会回收掉被引用的对象。</p><p>jvm采用Finalizer来管理每个强引用对象，并将其被标记要清理时加入ReferenceQueue，并逐一调用该对象的finalize()方法。</p><p>Finalizer是FinalReference的子类，该类被final修饰，不可再被继承修改，当某个类或其父类含有一个参数为空，返回值为void，方法体非空且名为finalize的方法，在该类被实例化的时候，jvm同时也会创建一个Finalizer对象去引用这个对象，Finalizer对象创建的时候就被加入到了一个名为unfialized的双向链表里面，如下Finalizer中的代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以自身为节点的双向链表，头节点永远是ufinalized，可参考下面add方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Finalizer unfinalized = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表</span></span><br><span class="line"><span class="keyword">private</span> Finalizer</span><br><span class="line">    next = <span class="keyword">null</span>,</span><br><span class="line">    prev = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次都将新的Finalizer对象添加到unfinalized双向链表头部    </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (unfinalized != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.next = unfinalized;</span><br><span class="line">            unfinalized.prev = <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        unfinalized = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有构造方法，防止外面调用，只能被下面的register调用</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Finalizer</span><span class="params">(Object finalizee)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(finalizee, queue);</span><br><span class="line">    add();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">* Invoked by VM </span></span><br><span class="line"><span class="comment">* 该方法被虚拟机调用，用于将前面所说，含有参数为空，返回值为void，方法体非空且名为finalize的</span></span><br><span class="line"><span class="comment">*方法的类，封装为Finalizer对象h</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object finalizee)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Finalizer(finalizee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，还有一个f-queue队列，这个队列是全局唯一的，当gc线程发现f类的对象出了Finalizer引用外，没有其他强引用了，就会把他放到pending队列中，HanderReference线程在pending队列中取到FinalReference对象的时候，会把他们放到这个f-queue队列里，随后Finalizer守护线程就可以去这个f-queue队列中取出Finalizer对象，在将其移出unfinalized双向链表，再invoke其finalize()方法，如下Finalizer中的代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态代码块，在Finalizer首次被初始化的时候调用，创建一个FinalizerThread守护线程，其优先级是8</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    ThreadGroup tg = Thread.currentThread().getThreadGroup();</span><br><span class="line">    <span class="keyword">for</span> (ThreadGroup tgn = tg;</span><br><span class="line">         tgn != <span class="keyword">null</span>;</span><br><span class="line">         tg = tgn, tgn = tg.getParent());</span><br><span class="line">    Thread finalizer = <span class="keyword">new</span> FinalizerThread(tg);</span><br><span class="line">    finalizer.setPriority(Thread.MAX_PRIORITY - <span class="number">2</span>);</span><br><span class="line">    finalizer.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">    finalizer.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 守护线程，从f-queue中将Finalizer移出，然后调用f类实例的finalize()方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalizerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> running;</span><br><span class="line">    FinalizerThread(ThreadGroup g) &#123;</span><br><span class="line">        <span class="keyword">super</span>(g, <span class="string">"Finalizer"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (running)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Finalizer thread starts before System.initializeSystemClass</span></span><br><span class="line">        <span class="comment">// is called.  Wait until JavaLangAccess is available</span></span><br><span class="line">        <span class="keyword">while</span> (!VM.isBooted()) &#123;</span><br><span class="line">            <span class="comment">// delay until VM completes initialization</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                VM.awaitBooted();</span><br><span class="line">              <span class="keyword">catch</span> (InterruptedException x) &#123;</span><br><span class="line">                <span class="comment">// ignore and continue</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> JavaLangAccess jla = SharedSecrets.getJavaLangAccess();</span><br><span class="line">        running = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Finalizer f = (Finalizer)queue.remove();</span><br><span class="line">                f.runFinalizer(jla);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException x) &#123;</span><br><span class="line">                <span class="comment">// ignore and continue</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将自身从unfinalized双向链表中移除，然后调用对象的finalize()方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">runFinalizer</span><span class="params">(JavaLangAccess jla)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasBeenFinalized()) <span class="keyword">return</span>;</span><br><span class="line">        remove();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object finalizee = <span class="keyword">this</span>.get();</span><br><span class="line">        <span class="keyword">if</span> (finalizee != <span class="keyword">null</span> &amp;&amp; !(finalizee <span class="keyword">instanceof</span> java.lang.Enum)) &#123;</span><br><span class="line">            jla.invokeFinalize(finalizee);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Clear stack slot containing this variable, to decrease</span></span><br><span class="line"><span class="comment">               the chances of false retention with a conservative GC */</span></span><br><span class="line">            finalizee = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable x) &#123; &#125;</span><br><span class="line">    <span class="keyword">super</span>.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将自身从unfinalized双向链表中移除</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (unfinalized == <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                unfinalized = <span class="keyword">this</span>.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                unfinalized = <span class="keyword">this</span>.prev;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.next.prev = <span class="keyword">this</span>.prev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.prev.next = <span class="keyword">this</span>.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="keyword">this</span>;   <span class="comment">/* Indicates that this has been finalized */</span></span><br><span class="line">        <span class="keyword">this</span>.prev = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="为什么需要Finalizer"><a href="#为什么需要Finalizer" class="headerlink" title="为什么需要Finalizer"></a>为什么需要Finalizer</h6><p>把Finalizer的源码看完了，其调用机制也研究了一遍，最后讨论一下，为什么需要有Finalizer机制？<br>jvm只能管理分配给java进程的内存空间，对于应用运行时需要的其他native资源：例如直接内存DirectByteBuffer（nio中经常会遇到），网络连接SocksSocketImpl，文件流FileInputStream等直接与操作系统交互的资源，jvm就不能帮我们回收了，需要我们自己调用释放这些资源的方法来回收，为了避免程序员忘记手动释放这些资源，在对象死后导致外部资源泄漏，java提供了finalizer机制，可以重写finalize()方法在对象被回收之前去释放其占用的外部资源，帮助调用这个回收资源方法的就是上面讲到的FinalizerThread守护进程。</p><p>但我们经常被告知，重写finalize()是不安全的，OpenJDk官方已经建议弃用Object类的finalize()方法，下面总结一些点：</p><ul><li>Finalizer是一个单线程来处理f-queue，如果系统有很多线程争用cpu，这个FinalizerThread守护线程获取的cpu时间片是不确定的，在其获取到时间片之前，应当被回收的对象一直在队列中堆积，占用大量内存，在经过n次gc后，可能仍然没有机会释放掉，这些对象就会进入到老年代，导致old剩余空间变小，从而使fullGC频繁</li><li>如果Finalizer对象产生的速度比销毁的速度快，也会导致f-queue队列中Finalizer对象堆积，这些对象一直占用堆内存，直到OOM</li><li>如果某个f类的finalize()方法执行非常耗时，或者这个方法阻塞了FinalizerThread守护线程，那么就会导致队列中的其它Finalizer对象一直在等无法回收，最终导致OOM</li><li>如果代码写的不当，对象有可能在执行完finalize()方法后，又被强引用给引用到了，于是对象就复活了</li></ul><p>基于以上几条原因，Finalizer机制是不靠谱的，所以释放资源一定要手动释放，否则就会导致一些严重的内存问题或者native资源泄漏问题，如果一定要用，要保证重写的finalize()方法能够快速执行。</p><h4 id="软引用（Soft-Reference）"><a href="#软引用（Soft-Reference）" class="headerlink" title="软引用（Soft Reference）"></a>软引用（Soft Reference）</h4><p>软引用是用来描述一些还有用但非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收后还没有足够的内存，才会抛出内存溢出异常。<br>基于这个特性，软引用就非常适合于内存敏感的缓存实现，软引用可以和一个引用队列一起使用，就是前面说的ReferenceQueue，如果软引用所引用的对象被回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReferenceQueue&lt;MyObject&gt; softQueue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line">SoftReference&lt;MyObject&gt; softRef = <span class="keyword">new</span> SoftReference&lt;&gt;(object, softQueue);</span><br></pre></td></tr></table></figure><p>当需要从SoftReference中获取到对象的强引用时，通过软引用的get方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyObject obj = softRef.get()</span><br></pre></td></tr></table></figure><p>即可获取到SoftReference所引用的对象。</p><h4 id="弱引用（Weak-Reference）"><a href="#弱引用（Weak-Reference）" class="headerlink" title="弱引用（Weak Reference）"></a>弱引用（Weak Reference）</h4><p>弱引用也是用来描述非必需对象的，但是其引用强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当GC工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象，他的用法跟软引用一样，可以和一个引用队列一起用，也可以直接使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ReferenceQueue&lt;MyObject&gt; weakQueue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line">WeakReference&lt;MyObject&gt; weakRef = <span class="keyword">new</span> WeakReference&lt;&gt;(object, weakQueue);</span><br><span class="line">MyObject obj = weakRef.get()</span><br></pre></td></tr></table></figure><h4 id="虚引用（Phantom-Reference）"><a href="#虚引用（Phantom-Reference）" class="headerlink" title="虚引用（Phantom Reference）"></a>虚引用（Phantom Reference）</h4><p>虚引用也成为幽灵引用或幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成印象，也无法通过虚引用来取得一个对象的实例，虚引用重写了get()方法，直接返回null:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为一个对象设置虚引用关联的唯一目的是能在这个对象被垃圾收集器回收时能收到一个系统通知，虚引用必须和引用队列一起使用，而且虚引用不会受内存紧张程度来回收，它的回收由垃圾收集器自己控制。</p>]]></content>
      
      <categories>
          
          <category> 深入学习java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>记一次OutOfMemoryError的排查</title>
      <link href="/2018/05/08/%E8%AE%B0%E4%B8%80%E6%AC%A1OutOfMemoryError%E7%9A%84%E6%8E%92%E6%9F%A5/"/>
      <url>/2018/05/08/%E8%AE%B0%E4%B8%80%E6%AC%A1OutOfMemoryError%E7%9A%84%E6%8E%92%E6%9F%A5/</url>
      <content type="html"><![CDATA[<h4 id="一、问题所在"><a href="#一、问题所在" class="headerlink" title="一、问题所在"></a>一、问题所在</h4><p>昨天在使用自己写的在线编译器的时候，发现接口访问不正常了，出现了OutOfMemoryError的报错，java.lang.OutOfMemoryError这个错误的产生原因基本初夏：JVM内存太小、程序不严谨，产生过多无法被垃圾回收的内存。</p><p>登录到开发机上，先用top结合jps看一下问题进程的pid，再使用jmap命令将内存heap输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -dump:format=b,file=heap.bin pid</span><br></pre></td></tr></table></figure></p><p>然后拷贝到本地电脑在mat中进行分析，点击Action下的Histogram，列出每个类实例的数量，发现是char[]占用了大量的内存,接着看Dominator Tree，从占用内存最多的类开始往下看，发现了CompilerPrintStream里面引用了StringBuilder，StringBuilder又引用了char[]，查看代码发现是CompilerPrintStream忘记关闭了。</p><p>CompilerPrintStream是继承自PrintStream，用于将标准输出重定向到一个StringBuilder中，然后通过这个StringBuilder将在线编译运行的代码输出进行记录返回：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompilerPrintStream</span> <span class="keyword">extends</span> <span class="title">PrintStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringBuilder compileResult;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CompilerPrintStream</span><span class="params">(OutputStream out, StringBuilder compileResult)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(out);</span><br><span class="line">        <span class="keyword">this</span>.compileResult = compileResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] buf, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String message = <span class="keyword">new</span> String(buf, off, len);</span><br><span class="line">        compileResult.append(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后就是这段代码出的内存泄漏问题：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    StringBuilder compileResult = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    CompilerPrintStream compilerPrintStream = <span class="keyword">new</span> CompilerPrintStream(System.out, compileResult);</span><br><span class="line">    System.setOut(compilerPrintStream);</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>问题就出在忘记在处理完成后，将PrintStream进行close操作，导致其无法被释放，间接的影响其引用的StringBuilder也无法释放，累计了很多垃圾导致了OutOfMemoryError</p><hr><h4 id="二、修改方法"><a href="#二、修改方法" class="headerlink" title="二、修改方法"></a>二、修改方法</h4><p>使用try-with-resources语法，可以将一些约定俗成的实现了AutoCloseable自动进行close操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder compileResult = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">try</span> (CompilerPrintStream compilerPrintStream = <span class="keyword">new</span> CompilerPrintStream(System.out, compileResult)) &#123;</span><br><span class="line">    System.setOut(compilerPrintStream);</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h4><p>导致OutOfMemoryError异常的常见原因有以下几种：</p><ul><li>内存中加载的数据量过于庞大，如一次从数据库取出过多数据；</li><li>一些特殊大对象的引用，使用完后未清空，使得JVM不能回收；</li><li>代码中存在死循环或循环产生过多重复的对象实体；</li><li>启动参数内存值设定的过小；</li></ul><p>这里可以说是第二种，各种提供了close方法的对象，比如数据库连接，网络连接，io操作等，除非显示调用了其close方法，否则是不会被GC回收的，原因是长生命周期对象持有短生命周期对象的引用。</p>]]></content>
      
      <categories>
          
          <category> 解bug之路 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>为什么OpenResty性能好</title>
      <link href="/2018/04/28/%E4%B8%BA%E4%BB%80%E4%B9%88OpenResty%E6%80%A7%E8%83%BD%E5%A5%BD/"/>
      <url>/2018/04/28/%E4%B8%BA%E4%BB%80%E4%B9%88OpenResty%E6%80%A7%E8%83%BD%E5%A5%BD/</url>
      <content type="html"><![CDATA[<h4 id="OpenResty可以做什么"><a href="#OpenResty可以做什么" class="headerlink" title="OpenResty可以做什么"></a>OpenResty可以做什么</h4><p>OpenResty是一个Web应用服务器，它打包了标准Nginx核心和很多常用第三方模块，这里说白了，就是一个nginx＋众多nginx模块，而其中最核心的就是lua-nginx-module，这个modlue是一个nginx的phase handler模块（类似ngx_http_static_module，nginx第三方模块可分为几大类，有phase handler，output filter和load-balancer），把自己关联到location上，主要负责处理客户端请求并产生待响应内容。</p><p>通过nginx_lua模块使得Nginx服务器不再只是一个负载均衡服务器或是静态资源服务器，而是转变为一个强大的Web应用服务器，它使用Lua语言对Nginx核心以及现有的各种Nginx C模块进行脚本编程，构建出可充分利用Nginx的事件模型来进行非阻塞I/O通信，处理一万以上并发请求的极端高性能Web应用。</p><p>我曾使用OpenResty将大量埋点请求快速落在磁盘上，通过消息队列削峰，方便后续清洗，所以在消息队列前一定要能有个高并发快速响应请求的服务来纪录日志。</p><h4 id="nginx优点"><a href="#nginx优点" class="headerlink" title="nginx优点"></a>nginx优点</h4><p>既然OpenResty是利用了nginx的高并发（当然还有lua本身作为一门最快的脚本语言，加上luaJIT即时编译器），站在了巨人的肩膀上，那么看看nginx为什么能处理大量并发请求，远比其它类型服务器更高效</p><h6 id="一、使用epoll实现I-O复用支持高并发"><a href="#一、使用epoll实现I-O复用支持高并发" class="headerlink" title="一、使用epoll实现I/O复用支持高并发"></a>一、使用epoll实现I/O复用支持高并发</h6><p>网络连接对应到linux里就是一个内存缓冲区，比如初始的监听socket（）就是建立一个对缓冲区的监听，返回一个对应该缓冲区的句柄，这个句柄实际就是对应该缓冲区的内存地址；如果有请求进来建立连接，就会唤醒监听该缓冲区的线程，随后accept（）一个连接，也就是新建立一个对应的内存缓冲区，后面的读写流，都是基于该缓冲区的。一个线程会接管很多缓冲区，这个时候就有几种监听缓冲区事件的方式了：</p><p>1、自己瞎几把写的（忙轮询）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">true</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i in streams[] &#123;</span><br><span class="line">        <span class="keyword">if</span> i has data</span><br><span class="line">            read until unavailable</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、select／poll（无差别轮询）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">true</span> &#123;</span><br><span class="line">    select (streams[]) &#123;</span><br><span class="line">        <span class="keyword">for</span> i in streams[] &#123;</span><br><span class="line">            <span class="keyword">if</span> i has data</span><br><span class="line">                read until unavailable</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3、epoll（有效轮询）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">true</span> &#123;</span><br><span class="line">    active_streams[] = epoll_wait(epollfd)</span><br><span class="line">    <span class="keyword">for</span> i in active_streams[] &#123;</span><br><span class="line">        read util unavailable</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>epoll原理，epoll模型的api如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>; <span class="comment">// 创建一个epoll句柄</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event *event)</span></span>; <span class="comment">// epoll事件注册，告诉内核监听哪个缓冲区的什么事件</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event *events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;   <span class="comment">// 等待一个事件的产生</span></span><br></pre></td></tr></table></figure></p><p>其内部实现的数据结构则为：红黑树＋双向链表，以及共享内存。</p><p>当调用epoll_create时，会在内存中申请临时一个文件系统，该文件系统以红黑树为数据结构，其根节点的父节点就是eventpoll结构体，其中核心是维护了一个红黑树的根节点和一个双线链表头节点，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct eventpoll &#123;</span><br><span class="line">    struct rb_root rbr;     <span class="comment">// 红黑树的根节点，这颗树中存储着所有添加到epoll中的需要监控的事件</span></span><br><span class="line">    struct list_head rdlist;    <span class="comment">// 双链表中则存放着将要通过epoll_wait返回给用户的满足条件的事件</span></span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>当调用epoll_ctl向epoll对象中添加事件时，会将句柄以及注册的事件转换成epitem结构体，插入到红黑树中，或者从红黑树中删除，红黑树通过旋转来保证大量插入情况下树的平衡，可以有log2(n)的查找效率，epitem结构体如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct epitem &#123;</span><br><span class="line">    struct rb_node rbn;     <span class="comment">// 红黑树节点</span></span><br><span class="line">    struct list_head rdllink;   <span class="comment">// 双向链表节点</span></span><br><span class="line">    struct epoll_filefd ffd;    <span class="comment">// 事件句柄信息</span></span><br><span class="line">    struct eventpoll *ep;   <span class="comment">// 指向其所属的eventpoll对象</span></span><br><span class="line">    struct epoll_event event;   <span class="comment">// 期待发生的事件类型</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>另外添加到epoll的事件都会与网卡建立一个回调函数，当有相应事件发生会触发中断，该这个回调函数的作用就是将epitem添加到rdlist双向链表中，因为每个epitem都维护了其根节点的父节点event poll结构体对象，而自身又包含了双向链表节点的结构体，所以能很方便的将自己链接到event_poll的双向链表rdlist中，eventpoll和epitem的数据结构及关系如下图所示：</p><p><img src="https://ytying.com/img/epoll.png" alt="epoll数据结构图"></p><p>当调用了epoll_wait函数时，eventpoll直接看自身的双向链表rdlist是否为空，如果为空则等待超时返回，如果不为空，就直接将链表拷贝回去，以此完成有效轮询。</p><h6 id="二、master／worker多进程模式"><a href="#二、master／worker多进程模式" class="headerlink" title="二、master／worker多进程模式"></a>二、master／worker多进程模式</h6><p>nginx启动后会在后台以deamon方式运行，后台进程包括一个master进程和多个worker进程，master进程用来管理worker进程，而worker进程负责真正处理网络事件。</p><p>结合上面的epoll网络模型，讲一下nginx的工作过程，当启动时nginx时，在master进程里会建立好需要listen的socket（listenfd），然后再fork出多个worker进程，所有worker进程都可以接收到listenfd的读事件，当请求进来时，为保证只有一个进程处理该连接，worker进程会在注册listenfd读事件前争抢accpet_mutex锁（这里还会有权重算法保证每个worker进程分配到的连接是平衡的），抢到互斥锁的进程可处理listenfd读事件，调用accept接受该连接，之后就开始读请求，解析请求，处理请求，写请求返回，最后断开连接。</p><p>nginx采用这种进程模型的好处：</p><ul><li><p>每个worker进程独立，worker之间无交互，也就避免了锁的开销</p></li><li><p>独立的进程相互之前没影响，一个挂掉了，其他还在工作</p></li></ul><p>在一个worker进程内处理多个并发请求，就用到上面说到的epoll模型，首先，请求过来，要建立连接再接受数据，返回数据，对应到系统底层，就是读写事件，那么当读写事件还没准备好时，就只能等待了，这时候就有阻塞和非阻塞了：</p><ul><li><p>阻塞的话，一个进程就只能处理一个连接，cpu空转率高，能支撑的并发量十分有限（取决于能建立多少个进程）</p></li><li><p>非阻塞的话，一个进程可接管多个连接，就涉及到上面说的三种监听缓冲区的方式，忙轮询，无差别轮询，和有效轮询，那肯定是使用epoll模型提供的有效轮询的效率最高，也能支持最大的并发量（并发量取决于worker_connections＊worker_processes，worker_processes一般设置为CPU核数，再多的话，CPU在多个进程内切换也是不小的消耗）</p></li></ul>]]></content>
      
      <categories>
          
          <category> OpenResty </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>OpenResty将日志压缩成protobuf格式</title>
      <link href="/2018/04/06/OpenResty%E5%B0%86%E6%97%A5%E5%BF%97%E5%8E%8B%E7%BC%A9%E6%88%90protobuf%E6%A0%BC%E5%BC%8F/"/>
      <url>/2018/04/06/OpenResty%E5%B0%86%E6%97%A5%E5%BF%97%E5%8E%8B%E7%BC%A9%E6%88%90protobuf%E6%A0%BC%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>protobuf是谷歌提供的混合语言数据标准，是一种结构化数据存储格式，可用于序列化，适合做数据存储和RPC数据交换。</p><p>但谷歌官方没有提供适用于lua的版本，比较有名的有两个库，一个是网易猿的protoc-gen-lua，另一个是云风的pbc。</p><p>protoc-gen-lua使用了python来做protoc的插件，把.proto文件生成.lua文件，配合编译出来的pb.so和一些外层包装的lua来进行序列化（类似java中的protobuf使用，.java配合官方jar包），大多数语言的protobuf实现，都是将编码的数据块展开成本地语言的数据结构，如C++／Java，这是比较高效的形式，但对于动态语言，如python／lua，就不一定了。</p><p>pbc是一个C版本的protobuf库，不必为每个message生成一大坨C++代码，因为这样很难做动态语言的binding。直接在C中做的编解码（这里有个自举的过程），然后搞了个lua的binding库在上面封了一层，可以参考下面四篇博客：</p><p><a href="https://blog.codingnow.com/2010/08/proto_buffers_in_lua.html" target="_blank" rel="noopener">proto buffers in lua</a></p><p><a href="https://blog.codingnow.com/2010/08/protobuf_for_lua.html" target="_blank" rel="noopener">继续完善 protobuf 库</a></p><p><a href="https://blog.codingnow.com/2011/12/protocol_buffers_for_c.html" target="_blank" rel="noopener">Protocol Buffers for C</a></p><p><a href="https://blog.codingnow.com/2011/12/pbc_lua_binding.html" target="_blank" rel="noopener">pbc 库的 lua binding</a></p><p>这里使用pbc来完成OpenResty与protobuf的整合：</p><p>1、在pbc-master下执行make，会编译生成build文件夹和下面的静态库libpbc.a</p><p>2、在pbc-master/binding/lua下执行make，利用刚才生动的静态库libpbc.a，以及注册方法给lua解释器的pbc-lua.c，编成一个动态库protobuf.so</p><p>3、在pbc-master/binding/lua下还有一个protobuf.lua是对protobuf.so的封装，将protobuf.lua和protobuf.so拷贝到OpenResty环境中的lualib/resty路径下（lualib/resty里面一般存放了第三方库）</p><p>4、编写描述数据结构的.proto文件，用谷歌提供的protoc工具编成自描述的pb文件格式，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./protoc --descriptor_set_out message.pb message.proto</span><br></pre></td></tr></table></figure><p>5、在lua文件require刚才拷贝过来的protobuf.lua即可使用，如果提示路径下没有protobuf.lua就用package.path引入路径，如下：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">package</span>.<span class="built_in">path</span> = <span class="string">'./openresty/lualib/resty/?.lua;'</span></span><br><span class="line"><span class="keyword">local</span> protobuf = <span class="built_in">require</span> <span class="string">"protobuf"</span></span><br></pre></td></tr></table></figure></p><p>6、编码和解码的代码如下：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">package</span>.<span class="built_in">path</span> = <span class="string">'./openresty/lualib/resty/?.lua;'</span></span><br><span class="line"><span class="keyword">local</span> protobuf = <span class="built_in">require</span> <span class="string">"protobuf"</span></span><br><span class="line"> </span><br><span class="line">addr = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"./addressbook.pb"</span>,<span class="string">"rb"</span>)</span><br><span class="line">buffer = addr:<span class="built_in">read</span> <span class="string">"*a"</span></span><br><span class="line">addr:<span class="built_in">close</span>()</span><br><span class="line">protobuf.register(buffer)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">local</span> person = &#123;</span><br><span class="line">    name = <span class="string">"Alice"</span>,</span><br><span class="line">    id = <span class="number">123</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">local</span> buffer = protobuf.encode(<span class="string">"tutorial.Person"</span>, person)</span><br><span class="line"><span class="keyword">local</span> t = protobuf.decode(<span class="string">"tutorial.Person"</span>, buffer)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> OpenResty </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Spring AOP三种实现方式的多维度差异</title>
      <link href="/2018/01/13/Spring%20AOP%E4%B8%89%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E7%9A%84%E5%A4%9A%E7%BA%AC%E5%BA%A6%E5%B7%AE%E5%BC%82/"/>
      <url>/2018/01/13/Spring%20AOP%E4%B8%89%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E7%9A%84%E5%A4%9A%E7%BA%AC%E5%BA%A6%E5%B7%AE%E5%BC%82/</url>
      <content type="html"><![CDATA[<p>记得有一次面试，面试官问我：<strong>spring aop是如何实现的，三种实现方式的多维度差异是什么，aop解决了什么问题？</strong></p><p><strong>spring aop是如何实现的</strong>，这个拍拍脑门也知道使用了动态代理，我就大概说了下jdk动态代理和CGlib动态代理。</p><p><strong>aop解决了什么问题</strong>，大致就是一些通用操作如果一个一个写在业务类中，麻烦不说还容易漏掉，将来改动起来也十分麻烦，所以需要一个统一的<strong>切面（aspect）</strong>去实现这个操作，然后<strong>织入（weaving）</strong>到需要的类中，将来有改动的时候只需要改切面代码就把所有地方都统一改了。</p><p>但是第二个问题给我问懵比了，<strong>三种实现方式的多维度差异？</strong>我在平时只使用过spring+aspectJ的方式，通过@Aspect注解定义一个切面类，然后用@Around注解在方法上定义一个切点表达式，使用ProceedingJoinPoint对象就能拿到需要方法的任何信息，如方法名，参数等，还可以执行这个方法。</p><p>偶然翻到一本书，《架构探险 从零开始写javaweb框架》，这本书中第四章详细阐述了spring aop的前世今生，貌似回答了这个问题，下面记录一下:</p><p>想要在代码中实现aop，大致有以下三种思路：</p><h4 id="1、自己手写动态代理"><a href="#1、自己手写动态代理" class="headerlink" title="1、自己手写动态代理"></a>1、自己手写动态代理</h4><p>自己手写动态代理也是可以实现aop的，有jdk动态代理去代理接口，获取使用CGlib去代理类，写起来代码也是一坨一坨的，后面也不太好维护。</p><h4 id="2、Spring-AOP"><a href="#2、Spring-AOP" class="headerlink" title="2、Spring AOP"></a>2、Spring AOP</h4><p>Spring AOP自身提供的aop能力分为<strong>编程式</strong>和<strong>声明式</strong>两种。</p><p>编程式的是基于AOP接口（Advice），如AfterReturingAdvice，并实现其中的afterReturning方法，最后在代码中通过ProxyFactory将要代理的目标对象和刚才实现的增强一起生成一个proxy代理，但是这种编程式的方法太弱了，基本没办法用，所以又有了声明式的使用方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建代理工厂</span></span><br><span class="line">ProxyFactory proxyFactory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line"><span class="comment">// 射入目标类对象</span></span><br><span class="line">proxyFactory.setTarget(<span class="keyword">new</span> GreetingImpl);</span><br><span class="line"><span class="comment">// 添加前置增强</span></span><br><span class="line">proxyFactory.addAdvice(<span class="keyword">new</span> GreetingBeforeAdvice());</span><br><span class="line"><span class="comment">// 从代理工厂中获取代理</span></span><br><span class="line">Greeting greeting = (Greeting) proxyFactory.getProxy();</span><br></pre></td></tr></table></figure><p>声明式是在xml中配置一个代理bean，class为org.springframework.aop.framework.ProxyFactoryBean，将要代理的接口，接口实现类，和增强类注入进去，这样就可以在代码中使用context.getBean(“**Proxy”)得到代理对象了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"greetingProxy"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"interfaces"</span> value=<span class="string">"aop.Greeting"</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">"target"</span> ref=<span class="string">"greetingImpl"</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">"interceptorNames"</span> value=<span class="string">"greetingAroundAdvice"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>但这样的方式每次将一个类里面的所有方法全部代理了，有时候我们想精细化代理，这时候就要用到spring提供的切面类（Advisor）了，如定义一个正则表达式切面RegexpMethodPointcutAdvisor，为其注入增强类和正则表达式，然后将这个切面类注入到ProxyFactoryBean中，代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"greetingAdvisor"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.aop.support.RegexpMethodPointcutAdvisor"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"advice"</span> ref=<span class="string">"greetingAroundAdvice"</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">"pattern"</span> value=<span class="string">"aop.demon.GreetingImpl.good.*"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"greetingProxy"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"target"</span> ref=<span class="string">"greetingImpl"</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">"interceptorNames"</span> value=<span class="string">"greetingAdvisor"</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">"proxyTargetClass"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>这两种解决方案都不是很理想，除了要定义大量的切面类，还有比较复杂的xml配置，正因为如此，spring最后选择了集成aspectj这个最经典的java aop框架。</p><h4 id="3、Spring-AspectJ"><a href="#3、Spring-AspectJ" class="headerlink" title="3、Spring+AspectJ"></a>3、Spring+AspectJ</h4><p>Spring集成了AspectJ，同时也保留了上面提到的切面与代理配置方式。将Spring和AspectJ集成与直接使用AspectJ是不同的。</p><p>直接使用AspectJ是需要定义aspectj类的（它扩展了java语法，需要用到特殊的编译器ajc），但Spring中只使用了aspectJ的注解和切点表达式（比正则表达式更易懂），举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingAspect</span> </span>&#123;</span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"exection(* aop.demo.GreetingImpl.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">before();</span><br><span class="line">Object result = pjp.proceed();</span><br><span class="line">after();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><table><thead><tr><th>增强类型</th><th>基于AOP接口</th><th>基于AOP注解</th></tr></thead><tbody><tr><td>Before Advice（前置增强）</td><td>MethodBeforeAdvice</td><td>@Before</td></tr><tr><td>After Advice（后置增强）</td><td>AfterReturningAdvice</td><td>@After</td></tr><tr><td>Around Advice（环绕增强）</td><td>MethodInterceptor</td><td>@Around</td></tr><tr><td>Throws Advice（抛出增强）</td><td>ThrowsAdvice</td><td>@AfterThrowing</td></tr><tr><td>Introduction Advice（引入增强）</td><td>DelegatingIntroductionInterceptor</td><td>@DeclareParents</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 深入学习java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>虚拟机类加载机制</title>
      <link href="/2017/10/04/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
      <url>/2017/10/04/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h6 id="一次重写ClassLoader开始讲起"><a href="#一次重写ClassLoader开始讲起" class="headerlink" title="一次重写ClassLoader开始讲起"></a>一次重写ClassLoader开始讲起</h6><p>在我完成Java在线编译器的过程中，碰到一个最大的坑就是ClassLoader的缓存机制，这个缓存机制导致了在一个类全限定名是相同的class文件，不会被重新加载，而是直接使用缓存已经加载好的字节流，导致在多次提交代码的时候，运行出来的都是第一次的结果，看了ClassLoader的源码以及阅读了IBM developerWorks的一篇文章<a href="https://www.ibm.com/developerworks/java/tutorials/j-classloader/j-classloader.html" target="_blank" rel="noopener">《Understanding the Java ClassLoader》</a>，通过重写ClassLoader的findClass(String name)函数，每次都重新从路径中加载读取新编译的class文件解决了这个问题，这次又看到周志明的《深入理解Java虚拟机》第7章虚拟机类加载机制，写一篇文章记录一下</p><h6 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h6><p>类从被加载到虚拟机内存开始，到卸载出内存为止，它的整个生命周期包括：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）7个阶段。其中验证、准备、解析3个部分统称为连接（Linking）。</p><p>Java虚拟机规范规定了在有且仅有5种情况下必须对类进行“初始化”：</p><ul><li>遇到new、getstatic、putstatic或invokestatic这4条指令的时候，这4条是class文件中的指令，分别对应了使用new关键字初始化对象实例、读取或设置一个类的静态字段、以及调用一个类的静态方法的时候。</li><li>使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则先触发初始化。</li><li>当初始化一个类的时候，发现其父类还没有初始化，则先触发父类的初始化。</li><li>当虚拟机启动时，用户需要指定一个主类（包含main()方法的那个类），虚拟机会先初始化这个类。</li><li>当使用jdk1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后解析的结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化。</li></ul><h6 id="类加载的准备阶段"><a href="#类加载的准备阶段" class="headerlink" title="类加载的准备阶段"></a>类加载的准备阶段</h6><p>准备阶段是正式为类变量分配内存并设置类变量初始值的过程，这些变量所使用的内存都在方法区中进行分配。这个时候只会分配类变量（被static修饰的变量），而不包括实例变量，而且这里所说的初始值一般情况是数据的零值，假设一个类变量定义为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br></pre></td></tr></table></figure></p><p>那变量value在准备阶段过后的初始值是0，而不是123，因为这时候尚未执行任何java方法，而把value赋值为123的putstatic指令是程序被编译后，存放于类构造器<code>&lt;clinit&gt;()</code>方法之中，所以把value赋值为123的动作将在初始化阶段才会执行。<br>但如果上面类变量value的定义变为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br></pre></td></tr></table></figure></p><p>则编译时javac会将value生成ConstantValue属性，再准备阶段虚拟机就会根据ConstantValue的设置将value赋值为123。</p><h6 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h6><p>类初始化阶段是类加载过程的最后一步，在准备阶段，变量已经赋过一次系统要求的初始值，而在初始化阶段，则根据程序员通过程序制定的主观计划去初始化类变量和其他资源。<br>初始化阶段是执行类构造器<code>&lt;clinit&gt;()</code>方法的过程。</p><ul><li><code>&lt;clinit&gt;()</code>方法是编译器自动收集类中所有变量的赋值动作和静态代码块中的语句合并产生的，编译器收集的顺序是有语句在源文件中出现的顺序决定的。</li><li><code>&lt;clinit&gt;()</code>方法与类的构造函数不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的<code>&lt;clinit&gt;()</code>方法执行前，父类的<code>&lt;clinit&gt;()</code>方法已经执行完毕，所以虚拟机中第一个被执行的<code>&lt;clinit&gt;()</code>方法的类肯定是java.lang.Object。</li><li><code>&lt;clinit&gt;()</code>对类和接口不是必须的，如果一个类中没有静态语句块，编译器可以不为这个类生成<code>&lt;clinit&gt;()</code>方法。</li></ul><h6 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h6><p>从Java虚拟机的角度看，只存在两种类加载器：一种是启动类加载器（Bootstrap ClassLoader），这个类加载器由C++实现，是虚拟机自身一部分；另一种就是其他类加载其，这些都是由Java实现，独立于虚拟机外部，并且全都继承自抽象类java.lang.ClassLoader。</p><ul><li>启动类加载器（Bootstrap ClassLoader）：这个类负责将存放在&lt;JAVA_HOME&gt;/lib目录中的，或者被-XbootClasspath参数指定的路径中的，并且死后虚拟机识别的（按文件名识别）类加载到虚拟机内存中。</li><li>扩展类加载器（Extension ClassLoader）：这个类加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载&lt;JAVA_HOME&gt;/lib/ext目录中的，或者被java.ext.dirs系统变量所指定的路径中的所有类库。</li><li>应用程序类加载器（Application ClassLoader）：这个类加载器由sun.misc.Launcher$AppClassLoader实现。由于这个类加载器是ClassLoader中的getSystemClassLoader()方法的返回值，所以一般也称之为系统类加载器，它负责加载用户类路径（ClassPath）上所指定的类库。</li></ul><p>这些类加载器之间的关系称之为双亲委派模型，即要求除了顶层的启动类加载器外，其他类加载器都要有父加载器（注意这里的父加载器不是由继承Inheritance来实现的，而是通过组合Composition来实现的）。<br>双亲委派模型的工作过程是：如果一个类加载器收到了加载类的请求，它首先不会自己去尝试加载这个类，而是把这个类委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有类加载请求最终都会被传送到顶层启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求后，子类加载器才会尝试自己加载。核心代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">            &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">               <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用双亲委派模型一个显而易见的好处是Java类随着它的类加载器一期具备了一种带有优先级的层次关系。例如java.lang.Object，它存放在rt.jar中，无论哪个类加载器要加载这个类，最终都是委派给Bootstrap ClassLoader去完成，因此Object类在程序中的各种类加载环境下都是同一个类。</p>]]></content>
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>JDK动态代理为什么只能代理接口</title>
      <link href="/2017/09/30/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%AA%E8%83%BD%E4%BB%A3%E7%90%86%E6%8E%A5%E5%8F%A3/"/>
      <url>/2017/09/30/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%AA%E8%83%BD%E4%BB%A3%E7%90%86%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<p>用过spring aop的都知道，在aop中实现将切面注入到切点中，就是通过动态代理的方式，并且对于接口类型的动态代理使用jdk内置的动态代理，对于类的动态代理使用CGlib第三方asm库，这时候问题来了，我一直在想为什么jdk动态代理只能代理接口呢？</p><h4 id="实践出真知"><a href="#实践出真知" class="headerlink" title="实践出真知"></a>实践出真知</h4><p>先写一段最基本的使用jdk动态代理的代码：</p><p>要代理的接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Doctor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接口的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoctorImpl</span> <span class="keyword">implements</span> <span class="title">Doctor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"gao"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继承自InvocationHandler，实现自己的切面逻辑：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoctorInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DoctorInvocationHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"p1"</span>);</span><br><span class="line">        Object obj = method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">"p2"</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>main方法，注意下面的createProxyClassFile方法，将jdk动态代理生成Proxy的class输出到本地磁盘，方面后续分析<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Doctor doctor = <span class="keyword">new</span> DoctorImpl();</span><br><span class="line">        DoctorInvocationHandler handler = <span class="keyword">new</span> DoctorInvocationHandler(doctor);</span><br><span class="line">        Doctor proxy = (Doctor) Proxy.newProxyInstance(</span><br><span class="line">                doctor.getClass().getClassLoader(),</span><br><span class="line">                doctor.getClass().getInterfaces(),</span><br><span class="line">                handler);</span><br><span class="line">        proxy.gao();</span><br><span class="line">        createProxyClassFile(<span class="string">"myProxy"</span>,doctor.getClass().getInterfaces());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createProxyClassFile</span><span class="params">(String name, Class&lt;?&gt;[] interfaces)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 其实jdk动态代理中也是使用了这个方法来生成Proxy类的字节码</span></span><br><span class="line">        <span class="keyword">byte</span>[] data = ProxyGenerator.generateProxyClass(name,interfaces);</span><br><span class="line">        FileOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = <span class="keyword">new</span> FileOutputStream(name+ <span class="string">".class"</span>);</span><br><span class="line">            out.write(data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行后输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p1</span><br><span class="line">gao</span><br><span class="line">p2</span><br></pre></td></tr></table></figure><p>然后找到生成的class文件，myProxy.class反编译后打开：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成的proxy类继承自Proxy，实现了Doctor接口，即上面传进去的interfaces接口列表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">myProxy</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Doctor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">myProxy</span><span class="params">(InvocationHandler var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略了toString，hashCode，equals等方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">gao</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line"><span class="comment">// 这里是重点，反射拿到gao这个方法，然后就可以实现gao接口</span></span><br><span class="line">            m3 = Class.forName(<span class="string">"Doctor"</span>).getMethod(<span class="string">"gao"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析到这里已经可以有个大概的认知了，jdk动态代理生成的$Proxy类继承自Proxy类，实现了传入的接口列表，所以jdk动态代理只能代理接口，而不能代理类方法。</strong></p><h4 id="看看源码"><a href="#看看源码" class="headerlink" title="看看源码"></a>看看源码</h4><p>下面看一下Proxy.newProxyInstance()这个方法的源码（只保留了最关键的代码）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Look up or generate the designated proxy class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Invoke its constructor with the designated invocation handler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class="line">        <span class="keyword">final</span> InvocationHandler ih = h;</span><br><span class="line">...</span><br><span class="line">        <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> Object[]&#123;h&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">...</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到getProxyClass0(loader,intfs)这个方法，就是传入ClassLoader和接口列表interfaces，然后会调用到刚才上面使用到的ProxyGenerator.generateProxyClass(name,interfaces)这个静态方法，生成一个继承自Proxy，实现了interfaces接口的Proxy类。</p><p><strong>看到这里就基本清楚了为什么jdk动态代理只能代理接口了，jdk动态代理根据定义好的规则，用传入的接口创建一个新类，这个新类中有一个对象就是InvocationHandler，在调用接口方法的时候，调用了InvocationHandler的invoke方法，而这个InvocationHandler已经被我们重新实现了invoke方法，这时候就能自由的切入我们想要执行的代码了。</strong></p>]]></content>
      
      <categories>
          
          <category> 深入学习java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>CMS垃圾收集器</title>
      <link href="/2017/08/03/CMS%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
      <url>/2017/08/03/CMS%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>CMS垃圾收集器是jdk1.5中发布的，CMS的目标就是获取最短的用户线程停顿时间，从名字Mark-Sweep就可以看出，采用了“标记-清除”算法实现，整个过程分成4个步骤:</p><ul><li>初始标记（CMS initial mark）</li><li>并发标记（CMS concurrent mark）</li><li>重新标记（CMS remark）</li><li>并发清除（CMS concurrent sweep）</li></ul><p>其中初始标记和重新标记仍然需要“stop the world”。初始标记仅是标记一下GC ROOTS直接关联到的对象，速度很快，而重新标记阶段是为了修正并发标记期间用户程序继续运作而导致标记产生变动的那一部分对象标记，整体流程如下图所示：</p><p><img src="https://ytying.com/img/cms.png" alt="CMS垃圾收集器"></p><p>CMS虽然是一款优秀的垃圾收集器，但是也远达不到完美的成都，它的缺点如下：</p><ul><li>CMS收集器无法处理浮动垃圾，也就是说CMS在并发清理阶段用户线程还在运行着，伴随着程序运行会产生新的垃圾，这一部分垃圾只能等到下一个GC，就称为<strong>浮动垃圾</strong>，所以CMS不能像其他收集器那样等到老年代满了再进行垃圾回收，需要预留一部分空间提供并发收集时的程序运作使用，jdk1.5的默认设置是68%，jdk1.6中，cMS的启动阈值提升至92%，但是一旦在CMS运行期间预留的内存无法满足程序需要，就会出现<strong>“Concurrent Mode Failure”</strong>失败，这是虚拟机会启动后备预案，即前面说过的Serial Old，这样停顿时间就很长了，所以参数-XX:CMSInitiatingOccupancyFraction设置的太高容易造成大量的“Concurrent Mode Failure”失败，性能反而降低。</li><li>还有一个缺点是，CMS是一款“标记-清除”算法的收集器，那么就意味着收集结束会有大量空间碎片产生。空间碎片过多，会出现即使还剩很多内存空间，但无法找到足够大的连续的空间来分配对象，不得不提前触发一次Full GC。为了解决这个问题，CMS提供了一个-XX:UseCMSCompactAtFullCollection开关参数（默认就是开启的），用于在CMS顶不住要Full GC的时候开启内存碎片的合并整理，内存整理是无法并发的，停顿时间就会变长。此外，还有一个参数-XX:CMSFullGCsBeforeCompaction，这个参数用于设置执行多少次不压缩的Full GC后，跟着来一次带压缩的（默认是0，即每次进入Full GC时都进行碎片整理）。</li></ul>]]></content>
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>HotSpot中的垃圾收集器</title>
      <link href="/2017/08/02/HotSpot%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
      <url>/2017/08/02/HotSpot%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>垃圾收集器是上篇文章垃圾收集算法的具体实现，这里看下HotSpot虚拟机提供的垃圾收集器：</p><p><img src="https://ytying.com/img/hotspot-gc-collectors.png" alt="hotspot垃圾收集器"></p><p>当GC只发生在新生代中，成为MinorGC；当GC发生在老年代中时，成为MajorGC或FullFC。如果两个垃圾收集器之间存在连线，就说明它们可搭配使用。</p><h4 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h4><p>Serial是最基本的垃圾收集器，新生代采用了复制算法暂停所有用户线程这就是大名鼎鼎的“stop the world”，虽是第一代垃圾收集器，但因为简单而高效，仍是<strong>clien</strong>模式下的默认的<strong>新生代</strong>垃圾收集器。</p><h4 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h4><p>ParNew是Serial的多线程版本，同样在新生代采用了复制算法，它是运行在<strong>server</strong>模式下默认的<strong>新生代</strong>垃圾收集器，因为除了Serial外，只有ParNew能跟CMS配合工作。Parnew是在使用-XX:+UseConcMarkSweepGC选项后的默认新生代收集器，也可以使用-XX:+UseParNewGC选项来强行制定它。</p><h4 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h4><p>Parallel Scavenge是一个新生代收集器，也是使用复制算法的多线程收集器，那么和ParNew有什么区别呢？</p><p>Parallel Scavenge收集器的特点是它的关注点和其他收集器不同，CMS等收集器的关注点是尽可能缩短垃圾回收的用户线程停顿时间，而Parallel Scavenge收集器的目标是达到一个可控制的吞吐量（Throughput）。所谓吞吐量就是CPU运行于用户线程的时间和CPU总消耗时间的比值，即<strong>吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)</strong>。因此Parallel Scavenge也被称为吞吐量优先收集器。</p><p>停顿时间越短（如CMS等关注的重点）就越适合交互式应用；而高吞吐量则适合用户高效利用CPU完成计算的后台运算任务。</p><p>提供了两个参数用于控制吞吐量，分别是控制最大垃圾收集停顿时间-XX:MaxGCPauseMillis，和直接设置吞吐量大小的-XX:GCTimeRatio（默认值是99，即允许最大1%的垃圾收集时间），此外还有一个-XX:+UseAdaptiveSizePolicy参数，这是一个开关参数，打开后就不需要手动指定新生代大小（-Xmn）和晋升老年代对象年龄（-XX:PretenureSizeThreshold）等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或最大吞吐量，称之为GC自适应调节策略。</p><h4 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h4><p>Serial Old是Serial的老年代版本，同样是一个单线程收集器，使用“标记-整理”算法来回收老年代垃圾，它作为CMS的后备预案，在并发收集发生Concurrent Mode Failure时使用。</p><h4 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h4><p>Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程“标记-整理”算法，在jdk1.6之前，因为没有Parallel Old收集器，Parallel Scavenge只能与Serial Old收集器配合使用，因为Serial Old在性能上的拖累，导致使用Parallel Scavenge收集器未必能在整体应用上获得吞吐量最大化的效果，甚至还不如ParNew加CMS的组合。直到Parallel Old出现后，“吞吐量优先”终于比较名副其实了。</p><h4 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h4><p><a href="https://ytying.com" target="_blank" rel="noopener">CMS垃圾收集器</a></p>]]></content>
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>GCROOTS和垃圾收集算法</title>
      <link href="/2017/07/10/GCROOTS%E5%92%8C%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/"/>
      <url>/2017/07/10/GCROOTS%E5%92%8C%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h4 id="GC-Roots"><a href="#GC-Roots" class="headerlink" title="GC Roots"></a>GC Roots</h4><p>很多语言是通过可达性算法来判断对象是否存活，这个算法的基本思路就是通过一系列成为GC ROOTS的对象作为起始点，从这些节点开始向下搜索，搜索走过的路径成为引用链（Reference Chain），当一个对象到GC ROOTS没有任何引用链相连时，则证明此对象不可达。</p><p>在Java中，可作为GC ROOTS的对象包括下面几种：</p><ul><li>本地变量表中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象（常量池是方法区的一部分，常量池在编译期间就将一部分数据存放于该区域，如基本数据类型int、long，final声明的常量，和String字符串，特别注意的是对于方法运行期位于栈中局部变量String常量的值，可以通过String.intern()方法将该值放入常量池中）</li><li>本地方法栈中JNI引用的对象</li></ul><h4 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h4><p>下面介绍几种垃圾收集算法思想（摘自《深入理解Java虚拟机》）</p><h6 id="标记-清除算法（Mark-Sweep）"><a href="#标记-清除算法（Mark-Sweep）" class="headerlink" title="标记-清除算法（Mark-Sweep）"></a>标记-清除算法（Mark-Sweep）</h6><p>最基础的收集算法，分为标记和清除两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。它的两个主要缺点：一个是效率问题，标记和清除的效率都不高；另一个是空间问题，标记清除后会产生大量不连续的内存碎片。</p><h6 id="复制算法（Copying）"><a href="#复制算法（Copying）" class="headerlink" title="复制算法（Copying）"></a>复制算法（Copying）</h6><p>为了解决效率问题，复制算法将可用内存按容量划分为大小相等的两块，每次只使用其中一块，当这一块内存使用完了，就将还存活的对象复制到另外一块上面，然后再把使用过的内存空间一次清理掉。这样使得每次都对整个半区进行内存回收，内存分配时也不用考虑内存碎片情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。这种算法将可用内存缩小了一半，代价太高。</p><p>现代的商业虚拟机都是采用这种算法来回收<strong>新生代</strong>，因为新生代中98%的对象都是“朝生夕死”的，所以并不需要按照1:1的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活的对象一次性复制到另一块Survivor中，最后清理掉Eden和刚才使用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8:1，这样每次新生代中可用内存空间为整个新生代容量的90%，只有10%的内存会被“浪费”。</p><p>当然，我们没办法保证每次回收都是只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖其他内存（老年代）进行<strong>分配担保（Handle Promotion）</strong>。如果另一块Survivor空间没有足够空间放上一次新生代收集下来的存活对象时，这些对象将直接通过分配担保机制进入老年代。</p><h6 id="标记-整理算法（Mark-Compact）"><a href="#标记-整理算法（Mark-Compact）" class="headerlink" title="标记-整理算法（Mark-Compact）"></a>标记-整理算法（Mark-Compact）</h6><p>复制算法在对象存活率较高时就要进行很多复制操作，效率就会变低，还需要额外的空间进行分配担保，以应对存活对象大于Survivor空间的情况，所以老年代一般使用“标记-整理”算法。</p><p>根据老年代的特点（对象存活率较高），提出了“标记-整理”算法，这种算法和“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活对象都移向一边，然后直接清理掉边界以外的内存。</p>]]></content>
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Mac编译OpenJDK7</title>
      <link href="/2017/06/24/Mac%E7%BC%96%E8%AF%91OpenJDK7/"/>
      <url>/2017/06/24/Mac%E7%BC%96%E8%AF%91OpenJDK7/</url>
      <content type="html"><![CDATA[<h4 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h4><p>1.电脑系统：MacOSX El Capitan（10.11.4）<br>2.OpenJDK7源码：<a href="http://www.java.net/download/openjdk/jdk7u40/promoted/b43/openjdk-7u40-fcs-src-b43-26_aug_2013.zip" target="_blank" rel="noopener">openjdk-7u40-fcs-src-b43-26_aug_2013.zip</a><br>3.BootStrap JDK：java version “1.6.0_65”<br>4.Ant：Apache Ant(TM) version 1.9.7 compiled on April 9 2016<br>5.XCode：大于4.1版本即可，App Store中安装最新的就行了<br>6.Command Line Tools：安装方法    xcode-select –install</p><hr><h4 id="二、编写脚本"><a href="#二、编写脚本" class="headerlink" title="二、编写脚本"></a>二、编写脚本</h4><p>解压OpenJdk7，在其中建立一个脚本文件:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设定语言选项，必须设置</span></span><br><span class="line"><span class="built_in">export</span> LANG=C</span><br><span class="line"><span class="comment"># 指定bootstrap jdk的路径。反引号的意思是执行这段shell代码后得到的结果作为该环境变量的值</span></span><br><span class="line"><span class="built_in">export</span> ALT_BOOTDIR=`/usr/libexec/java_home -v 1.6`</span><br><span class="line"><span class="comment"># Mac平台，C编译器不再是GCC，是clang</span></span><br><span class="line"><span class="built_in">export</span> CC=clang</span><br><span class="line"><span class="comment"># 跳过clang的一些严格的语法检查，不然会将N多的警告作为Error</span></span><br><span class="line"><span class="built_in">export</span> COMPILER_WARNINGS_FATAL=<span class="literal">false</span></span><br><span class="line"><span class="comment"># 链接时使用的参数</span></span><br><span class="line"><span class="built_in">export</span> LFLAGS=<span class="string">'-Xlinker -lstdc++'</span></span><br><span class="line"><span class="comment"># 是否使用clang</span></span><br><span class="line"><span class="built_in">export</span> USE_CLANG=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 使用64位数据模型</span></span><br><span class="line"><span class="built_in">export</span> LP64=1</span><br><span class="line"><span class="comment"># 告诉编译平台是64位，不然会按32位来编译</span></span><br><span class="line"><span class="built_in">export</span> ARCH_DATA_MODEL=64</span><br><span class="line"><span class="comment"># 允许自动下载依赖</span></span><br><span class="line"><span class="built_in">export</span> ALLOW_DOWNLOADS=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 并行编译的线程数，编译时间长，为了不影响其他工作，我选择为2</span></span><br><span class="line"><span class="built_in">export</span> HOTSPOT_BUILD_JOBS=4</span><br><span class="line"><span class="comment"># 是否跳过与先前版本的比较</span></span><br><span class="line"><span class="built_in">export</span> SKIP_COMPARE_IMAGES=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 是否使用预编译头文件，加快编译速度</span></span><br><span class="line"><span class="built_in">export</span> USE_PRECOMPILED_HEADER=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 是否使用增量编译</span></span><br><span class="line"><span class="built_in">export</span> INCREMENTAL_BUILD=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 编译内容</span></span><br><span class="line"><span class="built_in">export</span> BUILD_LANGTOOLS=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> BUILD_JAXP=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> BUILD_JAXWS=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> BUILD_CORBA=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> BUILD_HOTSPOT=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> BUILD_JDK=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 编译版本</span></span><br><span class="line"><span class="built_in">export</span> SKIP_DEBUG_BUILD=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> SKIP_FASTDEBUG_BUILD=<span class="literal">false</span></span><br><span class="line"><span class="built_in">export</span> DEBUG_NAME=debug</span><br><span class="line"><span class="comment"># 避开javaws和浏览器Java插件之类的部分的build</span></span><br><span class="line"><span class="built_in">export</span> BUILD_DEPLOY=<span class="literal">false</span></span><br><span class="line"><span class="built_in">export</span> BUILD_INSTALL=<span class="literal">false</span></span><br><span class="line"><span class="comment"># FreeType</span></span><br><span class="line"><span class="built_in">export</span> FREETYPE_LIB_PATH=/usr/X11R6/lib</span><br><span class="line"><span class="built_in">export</span> FREETYPE_HEADERS_PATH=/usr/X11R6/include</span><br><span class="line"><span class="built_in">export</span> ALT_FREETYPE_LIB_PATH=/usr/<span class="built_in">local</span>/Cellar/freetype/2.6.3/lib</span><br><span class="line"><span class="built_in">export</span> ALT_FREETYPE_HEADERS_PATH=/usr/<span class="built_in">local</span>/Cellar/freetype/2.6.3/include</span><br><span class="line"><span class="comment"># 链接CUPS</span></span><br><span class="line"><span class="built_in">export</span> ALT_CUPS_HEADERS_PATH=/Users/UKfire/openjdk/cups-2.2.1</span><br><span class="line"><span class="comment"># 编译结果的输出路径</span></span><br><span class="line"><span class="built_in">export</span> ALT_OUTPUTDIR=/Users/UKfire/openjdk/build</span><br><span class="line"><span class="comment"># ANT</span></span><br><span class="line"><span class="built_in">export</span> ANT_HOME=/usr/<span class="built_in">local</span>/ant</span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> JAVA_HOME</span><br><span class="line"><span class="built_in">unset</span> CLASSPATH</span><br><span class="line"><span class="built_in">unset</span> LD_LIBRARY_PATH</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> _JAVA_OPTIONS=-Dfile.encoding=ASCII</span><br><span class="line"></span><br><span class="line">make debug_build 2&gt;&amp;1 | tee <span class="variable">$ALT_OUTPUTDIR</span>/build.log</span><br></pre></td></tr></table></figure></p><p>写完保存之后运行改脚本即可进行编译</p><hr><h4 id="三、编译过程中的一些坑"><a href="#三、编译过程中的一些坑" class="headerlink" title="三、编译过程中的一些坑"></a>三、编译过程中的一些坑</h4><h6 id="1-ERROR-The-Compiler-version-is-undefined"><a href="#1-ERROR-The-Compiler-version-is-undefined" class="headerlink" title="1.ERROR: The Compiler version is undefined."></a>1.ERROR: The Compiler version is undefined.</h6><p>解决方法：加上这两个软链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/bin/llvm-g++ /Applications/Xcode.app/Contents/Developer/usr/bin/llvm-g++</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/bin/llvm-gcc /Applications/Xcode.app/Contents/Developer/usr/bin/llvm-gcc</span><br></pre></td></tr></table></figure><h6 id="2-碰到关于-usr-bin-ant的问题"><a href="#2-碰到关于-usr-bin-ant的问题" class="headerlink" title="2.碰到关于/usr/bin/ant的问题"></a>2.碰到关于/usr/bin/ant的问题</h6><p>&emsp;这时需要把/usr/local/ant/bin/ant这个文件夹拷贝到/usr/bin/目录下，如果Mac系统版本是El Capitan，那么不能直接拷贝文件到/usr/bin/目录下，sudo权限也不行，因为加了Rootless机制。具体做法是重启按住Command＋R，进入恢复模式，打开终端，输入 csrutil disable，重启即可。</p><h6 id="3-其他一些问题可以参考："><a href="#3-其他一些问题可以参考：" class="headerlink" title="3.其他一些问题可以参考："></a>3.其他一些问题可以参考：</h6><p><a href="http://zhongmingmao.me/2016/07/13/openjdk.html" target="_blank" rel="noopener">Mac编译OpenJDK7(8)和Eclipse调试Hotspot</a><br>&emsp;这篇文章把一些编译错误的处理方法写得很细致了，我遇到的一些问题也是参考这篇文章解决的，感谢。</p><h6 id="4-最后说一些"><a href="#4-最后说一些" class="headerlink" title="4.最后说一些"></a>4.最后说一些</h6><p>&emsp;编译的过程其实挺坑的，如果碰到什么权限的问题，或者你改了BootStrap JDK，那就重新下载源码包进行编译，因为编译错误的时候可能会生成一些文件导致奇怪的问题产生。</p><hr><h4 id="四、编译成功"><a href="#四、编译成功" class="headerlink" title="四、编译成功"></a>四、编译成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#-- Build times ----------</span><br><span class="line">Target debug_build</span><br><span class="line">Start 2016-11-15 12:40:04</span><br><span class="line">End   2016-11-15 12:50:07</span><br><span class="line">00:00:07 corba</span><br><span class="line">00:00:11 hotspot</span><br><span class="line">00:00:02 jaxp</span><br><span class="line">00:00:03 jaxws</span><br><span class="line">00:09:36 jdk</span><br><span class="line">00:00:02 langtools</span><br><span class="line">00:10:03 TOTAL</span><br><span class="line">-------------------------</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">make[5]: `/Users/UKfire/openjdk/hotspot/build/bsd/bsd_amd64_compiler2/jvmg/../generated/sa-jdi.jar&apos; is up to date.</span><br><span class="line">echo &quot;dtrace headers generated&quot;</span><br><span class="line">dtrace headers generated</span><br><span class="line">make[4]: `precompiled.hpp.gch&apos; is up to date.</span><br><span class="line">echo &quot;Doing vm.make build:&quot;</span><br><span class="line">Doing vm.make build:</span><br><span class="line">All done.</span><br><span class="line">cd bsd_amd64_compiler2/jvmg &amp;&amp; ./test_gamma</span><br><span class="line">JAVA_HOME must point to a 64-bit OpenJDK.</span><br><span class="line"></span><br><span class="line">20:08:20 Build Finished (took 10s.562ms)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
